{"ast":null,"code":"var _s = $RefreshSig$();\n// import {useState} from 'react';\n// import Papa from \"papaparse\";\n// import { read, utils } from \"xlsx\";\n// import { useDispatch } from \"react-redux\";\n// import { setUploadMessage } from \"../redux/uploadSlice\";\n// import { useSendFile } from \"./useSendFile\"; // Reuse the `useSendFile` hook\n\n// export const useFileChange = () => {\n//   const dispatch = useDispatch();\n//   const sendFile = useSendFile(); // Use the sendFile logic\n\n//   const [csvData, setCsvData] = useState(\"\");\n\n//   const convertFile = (event) => {\n//     const file = event.target.files[0];\n//     const reader = new FileReader();\n//     reader.onload = (e) => {\n//       const data = new Uint8Array(e.target.result);\n//       const workbook = read(data, { type: \"array\" });\n//       const sheetName = workbook.SheetNames[0];\n//       const sheet = workbook.Sheets[sheetName];\n//       const csvData = Papa.unparse(utils.sheet_to_json(sheet), {\n//         header: false,\n//       });\n//       const newHeader = \"Register No, Student Name, Branch, Semester, Course, Exam Type, Attendance, Withheld, IMark, Grade, Result\\n\";\n//       const finalCSVData= newHeader + csvData.substring(csvData.indexOf(\"\\n\") + 1)\n//       setCsvData(finalCSVData);\n//     };\n//     reader.readAsArrayBuffer(file);\n//   };\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       console.log(\"File selected:\", file);\n\n//       if(file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n//       {convertFile(file); sendFile(csvData)}\n//       else\n//       // Call the sendFile function from the hook\n//       sendFile(file);\n\n//       // Simulate a delay for setting the upload message\n//       setTimeout(() => {\n//         dispatch(setUploadMessage(`File \"${file.name}\" uploaded successfully!`));\n//       }, 1000);\n//     }\n//   };\n\n//   return handleFileChange; // Return the handler function\n// };\n\nimport { useState } from 'react';\nimport { read, utils } from \"xlsx\";\nimport { useDispatch } from \"react-redux\";\nimport { setUploadMessage } from \"../redux/uploadSlice\";\nimport { useSendFile } from \"./useSendFile\"; // Reuse the `useSendFile` hook\n\nexport const useFileChange = () => {\n  _s();\n  const dispatch = useDispatch();\n  const sendFile = useSendFile(); // Use the sendFile logic\n\n  const [txtData, setTxtData] = useState(\"\");\n  const convertFileToText = file => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      const data = new Uint8Array(e.target.result);\n      const workbook = read(data, {\n        type: \"array\"\n      });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n\n      // Convert the sheet to JSON\n      const jsonData = utils.sheet_to_json(sheet, {\n        header: 1\n      }); // Get data as array of arrays\n\n      // Convert the JSON data into plain text (tab separated)\n      const plainTextData = jsonData.map(row => row.join(\"\\t\")) // Join each row with a tab space\n      .join(\"\\n\"); // Join rows with a new line\n\n      setTxtData(plainTextData);\n\n      // After updating the txtData, send the data\n      sendFile(plainTextData);\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      console.log(\"File selected:\", file);\n      if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\n        convertFileToText(file);\n      } else {\n        // For non-XLXS files, just send the file as is\n        sendFile(file);\n      }\n\n      // Simulate a delay for setting the upload message\n      setTimeout(() => {\n        dispatch(setUploadMessage(`File \"${file.name}\" uploaded successfully!`));\n      }, 1000);\n    }\n  };\n  return handleFileChange; // Return the handler function\n};\n_s(useFileChange, \"L1cPCmP/eXJ+KFbaAtYSSaFdMtc=\", false, function () {\n  return [useDispatch, useSendFile];\n});","map":{"version":3,"names":["useState","read","utils","useDispatch","setUploadMessage","useSendFile","useFileChange","_s","dispatch","sendFile","txtData","setTxtData","convertFileToText","file","reader","FileReader","onload","e","data","Uint8Array","target","result","workbook","type","sheetName","SheetNames","sheet","Sheets","jsonData","sheet_to_json","header","plainTextData","map","row","join","readAsArrayBuffer","handleFileChange","event","files","console","log","setTimeout","name"],"sources":["/Users/debjani1413/swipe-clone/frontend/src/hooks/useFileChange.js"],"sourcesContent":["// import {useState} from 'react';\n// import Papa from \"papaparse\";\n// import { read, utils } from \"xlsx\";\n// import { useDispatch } from \"react-redux\";\n// import { setUploadMessage } from \"../redux/uploadSlice\";\n// import { useSendFile } from \"./useSendFile\"; // Reuse the `useSendFile` hook\n\n// export const useFileChange = () => {\n//   const dispatch = useDispatch();\n//   const sendFile = useSendFile(); // Use the sendFile logic\n\n//   const [csvData, setCsvData] = useState(\"\");\n\n//   const convertFile = (event) => {\n//     const file = event.target.files[0];\n//     const reader = new FileReader();\n//     reader.onload = (e) => {\n//       const data = new Uint8Array(e.target.result);\n//       const workbook = read(data, { type: \"array\" });\n//       const sheetName = workbook.SheetNames[0];\n//       const sheet = workbook.Sheets[sheetName];\n//       const csvData = Papa.unparse(utils.sheet_to_json(sheet), {\n//         header: false,\n//       });\n//       const newHeader = \"Register No, Student Name, Branch, Semester, Course, Exam Type, Attendance, Withheld, IMark, Grade, Result\\n\";\n//       const finalCSVData= newHeader + csvData.substring(csvData.indexOf(\"\\n\") + 1)\n//       setCsvData(finalCSVData);\n//     };\n//     reader.readAsArrayBuffer(file);\n//   };\n\n\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0];\n//     if (file) {\n//       console.log(\"File selected:\", file);\n\n//       if(file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n//       {convertFile(file); sendFile(csvData)}\n//       else\n//       // Call the sendFile function from the hook\n//       sendFile(file);\n\n//       // Simulate a delay for setting the upload message\n//       setTimeout(() => {\n//         dispatch(setUploadMessage(`File \"${file.name}\" uploaded successfully!`));\n//       }, 1000);\n//     }\n//   };\n\n//   return handleFileChange; // Return the handler function\n// };\n\nimport { useState } from 'react';\nimport { read, utils } from \"xlsx\";\nimport { useDispatch } from \"react-redux\";\nimport { setUploadMessage } from \"../redux/uploadSlice\";\nimport { useSendFile } from \"./useSendFile\"; // Reuse the `useSendFile` hook\n\nexport const useFileChange = () => {\n  const dispatch = useDispatch();\n  const sendFile = useSendFile(); // Use the sendFile logic\n\n  const [txtData, setTxtData] = useState(\"\");\n\n  const convertFileToText = (file) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const data = new Uint8Array(e.target.result);\n      const workbook = read(data, { type: \"array\" });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n\n      // Convert the sheet to JSON\n      const jsonData = utils.sheet_to_json(sheet, { header: 1 }); // Get data as array of arrays\n\n      // Convert the JSON data into plain text (tab separated)\n      const plainTextData = jsonData\n        .map(row => row.join(\"\\t\"))  // Join each row with a tab space\n        .join(\"\\n\");  // Join rows with a new line\n\n      setTxtData(plainTextData);\n      \n      // After updating the txtData, send the data\n      sendFile(plainTextData);\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      console.log(\"File selected:\", file);\n\n      if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\n        convertFileToText(file);\n      } else {\n        // For non-XLXS files, just send the file as is\n        sendFile(file);\n      }\n\n      // Simulate a delay for setting the upload message\n      setTimeout(() => {\n        dispatch(setUploadMessage(`File \"${file.name}\" uploaded successfully!`));\n      }, 1000);\n    }\n  };\n\n  return handleFileChange; // Return the handler function\n};\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,IAAI,EAAEC,KAAK,QAAQ,MAAM;AAClC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,WAAW,QAAQ,eAAe,CAAC,CAAC;;AAE7C,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAMM,QAAQ,GAAGJ,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMY,iBAAiB,GAAIC,IAAI,IAAK;IAClC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;MACrB,MAAMC,IAAI,GAAG,IAAIC,UAAU,CAACF,CAAC,CAACG,MAAM,CAACC,MAAM,CAAC;MAC5C,MAAMC,QAAQ,GAAGrB,IAAI,CAACiB,IAAI,EAAE;QAAEK,IAAI,EAAE;MAAQ,CAAC,CAAC;MAC9C,MAAMC,SAAS,GAAGF,QAAQ,CAACG,UAAU,CAAC,CAAC,CAAC;MACxC,MAAMC,KAAK,GAAGJ,QAAQ,CAACK,MAAM,CAACH,SAAS,CAAC;;MAExC;MACA,MAAMI,QAAQ,GAAG1B,KAAK,CAAC2B,aAAa,CAACH,KAAK,EAAE;QAAEI,MAAM,EAAE;MAAE,CAAC,CAAC,CAAC,CAAC;;MAE5D;MACA,MAAMC,aAAa,GAAGH,QAAQ,CAC3BI,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAE;MAAA,CAC5BA,IAAI,CAAC,IAAI,CAAC,CAAC,CAAE;;MAEhBvB,UAAU,CAACoB,aAAa,CAAC;;MAEzB;MACAtB,QAAQ,CAACsB,aAAa,CAAC;IACzB,CAAC;IACDjB,MAAM,CAACqB,iBAAiB,CAACtB,IAAI,CAAC;EAChC,CAAC;EAED,MAAMuB,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMxB,IAAI,GAAGwB,KAAK,CAACjB,MAAM,CAACkB,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIzB,IAAI,EAAE;MACR0B,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE3B,IAAI,CAAC;MAEnC,IAAIA,IAAI,CAACU,IAAI,KAAK,mEAAmE,EAAE;QACrFX,iBAAiB,CAACC,IAAI,CAAC;MACzB,CAAC,MAAM;QACL;QACAJ,QAAQ,CAACI,IAAI,CAAC;MAChB;;MAEA;MACA4B,UAAU,CAAC,MAAM;QACfjC,QAAQ,CAACJ,gBAAgB,CAAC,SAASS,IAAI,CAAC6B,IAAI,0BAA0B,CAAC,CAAC;MAC1E,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;EAED,OAAON,gBAAgB,CAAC,CAAC;AAC3B,CAAC;AAAC7B,EAAA,CAlDWD,aAAa;EAAA,QACPH,WAAW,EACXE,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
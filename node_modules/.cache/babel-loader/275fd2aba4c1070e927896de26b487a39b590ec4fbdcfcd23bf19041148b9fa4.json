{"ast":null,"code":"\"use strict\";\n\n// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.call = call;\nconst fs = require(\"fs\");\nconst is = require(\"is\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst gax = require(\"google-gax\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst _requestToObject = request => {\n  if (is.string(request)) {\n    // Is this a URL or a local file?\n    // Guess based on what the string looks like, and build the full\n    // request object in the correct format.\n    if (request.indexOf('://') === -1 || request.indexOf('file://') === 0) {\n      request = {\n        image: {\n          source: {\n            filename: request\n          }\n        }\n      };\n    } else {\n      request = {\n        image: {\n          source: {\n            imageUri: request\n          }\n        }\n      };\n    }\n  } else if (Buffer.isBuffer(request)) {\n    // Drop the buffer one level lower; it will get dealt with later\n    // in the function. This allows sending <Buffer> and {image: <Buffer>} to\n    // both work identically.\n    request = {\n      image: request\n    };\n  }\n  return request;\n};\nconst _coerceRequest = (request, callback) => {\n  // At this point, request must be an object with an `image` key; if not,\n  // it is an error. If there is no image, throw an exception.\n  if (!is.object(request) || is.undefined(request.image)) {\n    return callback(new Error('No image present.'));\n  }\n  // If this is a buffer, read it and send the object\n  // that the Vision API expects.\n  if (Buffer.isBuffer(request.image)) {\n    request.image = {\n      content: request.image.toString('base64')\n    };\n  }\n  // If the file is specified as a filename and exists on disk, read it\n  // and coerce it into the base64 content.\n  if (request.image.source && request.image.source.filename) {\n    fs.readFile(request.image.source.filename, (err, blob) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      request.image.content = blob.toString('base64');\n      delete request.image.source;\n      return callback(null, request);\n    });\n  } else {\n    return callback(null, request);\n  }\n};\nconst _createSingleFeatureMethod = featureValue => {\n  return function (request, callOptionsOrCallback, callback) {\n    // confidence check: If we got a string or buffer, we need this to be\n    // in object form now, so we can tack on the features list.\n    //\n    // Do the minimum required conversion, which can also be guaranteed to\n    // be synchronous (e.g. no file loading yet; that is handled by\n    // annotateImage later.\n    const annotateImageRequest = _requestToObject(request);\n    // If a callback was provided and options were skipped, normalize\n    // the argument names.\n    let callOptions;\n    if (is.undefined(callback) && is.function(callOptionsOrCallback)) {\n      callback = callOptionsOrCallback;\n      callOptions = undefined;\n    } else {\n      callOptions = callOptionsOrCallback;\n    }\n    // Add the feature to the request.\n    annotateImageRequest.features = annotateImageRequest.features || [{\n      type: featureValue\n    }];\n    // If the user submitted explicit features that do not line up with\n    // the precise method called, throw an exception.\n    for (const feature of annotateImageRequest.features) {\n      if (feature.type !== featureValue) {\n        throw new Error('Setting explicit features is not supported on this method. ' + 'Use the #annotateImage method instead.');\n      }\n    }\n    // Call the underlying #annotateImage method.\n    return this.annotateImage(annotateImageRequest, callOptions, callback);\n  };\n};\nfunction call(apiVersion) {\n  const methods = {};\n  /**\n   * Annotate a single image with the requested features.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#annotateImage\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be base64 encoded text.\n   *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n   * @param {object[]} request.features An array of the specific annotation\n   *     features being requested. This should take a form such as:\n   *\n   *         [{type: vision.types.Feature.Type.FACE_DETECTION},\n   *         {type: vision.types.Feature.Type.WEB_DETECTION}]\n   *\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {source: {imageUri: 'gs://path/to/image.jpg'}},\n   *   features: [],\n   * };\n   * client\n   *   .annotateImage(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.annotateImage = (0, promisify_1.promisify)(function (request, callOptionsOrCallback, callback) {\n    // If a callback was provided and options were skipped, normalize\n    // the argument names.\n    let callOptions;\n    if (is.undefined(callback) && is.function(callOptionsOrCallback)) {\n      callback = callOptionsOrCallback;\n      callOptions = undefined;\n    } else {\n      callOptions = callOptionsOrCallback;\n    }\n    // If we got a filename for the image, open the file and transform\n    // it to content.\n    return _coerceRequest(request, (err, req) => {\n      if (err) {\n        return callback(err);\n      }\n      // Call the GAPIC batch annotation function.\n      const requests = {\n        requests: [req]\n      };\n      return this.batchAnnotateImages(requests, callOptions, (err, r) => {\n        // If there is an error, handle it.\n        if (err) {\n          return callback(err);\n        }\n        // We are guaranteed to only have one response element, since we\n        // only sent one image.\n        const response = r.responses[0];\n        // Fire the callback if applicable.\n        return callback(undefined, response);\n      });\n    });\n  });\n  const protoFilesRoot = gax.protobuf.Root.fromJSON(\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  require('../protos/protos.json'));\n  const features = protoFilesRoot.lookup(`google.cloud.vision.${apiVersion}.Feature.Type`).values;\n  /**\n   * Annotate a single image with face detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#faceDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be base64 encoded text.\n   *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .faceDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.faceDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.FACE_DETECTION));\n  /**\n   * Annotate a single image with landmark detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#landmarkDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be base64 encoded text.\n   *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .landmarkDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.landmarkDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.LANDMARK_DETECTION));\n  /**\n   * Annotate a single image with logo detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#logoDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be base64 encoded text.\n   *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .logoDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.logoDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.LOGO_DETECTION));\n  /**\n   * Annotate a single image with label detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#labelDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be base64 encoded text.\n   *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .labelDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.labelDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.LABEL_DETECTION));\n  /**\n   * Annotate a single image with text detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#textDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be base64 encoded text.\n   *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .textDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.textDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.TEXT_DETECTION));\n  /**\n   * Annotate a single image with document text detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#documentTextDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be base64 encoded text.\n   *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .documentTextDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.documentTextDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.DOCUMENT_TEXT_DETECTION));\n  /**\n   * Annotate a single image with safe search detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#safeSearchDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be base64 encoded text.\n   *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .safeSearchDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.safeSearchDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.SAFE_SEARCH_DETECTION));\n  /**\n   * Annotate a single image with image properties.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#imageProperties\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be base64 encoded text.\n   *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .imageProperties(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.imageProperties = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.IMAGE_PROPERTIES));\n  /**\n   * Annotate a single image with crop hints.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#cropHints\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be base64 encoded text.\n   *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .cropHints(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.cropHints = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.CROP_HINTS));\n  /**\n   * Annotate a single image with web detection.\n   *\n   * @see v1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1.AnnotateImageRequest\n   *\n   * @method v1.ImageAnnotatorClient#webDetection\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be base64 encoded text.\n   *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision');\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .webDetection(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  methods.webDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.WEB_DETECTION));\n  /**\n   * Annotate a single image with the result from Product Search.\n   *\n   * @see v1p3beta1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1p3beta1.AnnotateImageRequest\n   *\n   * @method v1p3beta1.ImageAnnotatorClient#productSearch\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1p3beta1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be base64 encoded text.\n   *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * const vision = require('@google-cloud/vision').v1p3beta1;\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .productSearch(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  if (features.PRODUCT_SEARCH !== undefined) {\n    methods.productSearch = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.PRODUCT_SEARCH));\n  }\n  /**\n   * Annotate a single image with localization vectors.\n   *\n   * @see v1p3beta1.ImageAnnotatorClient#batchAnnotateImages\n   * @see google.cloud.vision.v1p3beta1.AnnotateImageRequest\n   *\n   * @method v1p3beta1.ImageAnnotatorClient#objectLocalization\n   * @param {object|string|Buffer} request A representation of the request\n   *     being sent to the Vision API. This is an\n   *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n   *     For simple cases, you may also send a string (the URL or filename of\n   *     the image) or a buffer (the image itself).\n   * @param {object} request.image A dictionary-like object representing the\n   *     image. This should have a single key (`source`, `content`).\n   *\n   *     If the key is `source`, the value should be another object containing\n   *     `imageUri` or `filename` as a key and a string as a value.\n   *\n   *     If the key is `content`, the value should be base64 encoded text.\n   *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n   * @param {object} [callOptions] Optional parameters. You can override the\n   *     default settings for this call, e.g, timeout, retries, paginations,\n   *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n   *     for the details.\n   * @param {function(?Error, ?object)} [callback] The function which will be\n   *     called with the result of the API call.\n   *\n   *     The second parameter to the callback is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   * @returns {Promise} The promise which resolves to an array. The first\n   *     element of the array is an object representing\n   *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n   *     The promise has a method named \"cancel\" which cancels the ongoing API\n   *     call.\n   *\n   * @example\n   * // Object localization is only available in v1p3beta1.\n   * const vision = require('@google-cloud/vision').v1p3beta1;\n   * const client = new vision.ImageAnnotatorClient();\n   *\n   * const request = {\n   *   image: {\n   *     source: {imageUri: 'gs://path/to/image.jpg'}\n   *   }\n   * };\n   *\n   * client\n   *   .objectLocalization(request)\n   *   .then(response => {\n   *     // doThingsWith(response);\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  if (features.OBJECT_LOCALIZATION !== undefined) {\n    methods.objectLocalization = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.OBJECT_LOCALIZATION));\n  }\n  return methods;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","call","fs","require","is","promisify_1","gax","_requestToObject","request","string","indexOf","image","source","filename","imageUri","Buffer","isBuffer","_coerceRequest","callback","object","undefined","Error","content","toString","readFile","err","blob","_createSingleFeatureMethod","featureValue","callOptionsOrCallback","annotateImageRequest","callOptions","function","features","type","feature","annotateImage","apiVersion","methods","promisify","req","requests","batchAnnotateImages","r","response","responses","protoFilesRoot","protobuf","Root","fromJSON","lookup","values","faceDetection","FACE_DETECTION","landmarkDetection","LANDMARK_DETECTION","logoDetection","LOGO_DETECTION","labelDetection","LABEL_DETECTION","textDetection","TEXT_DETECTION","documentTextDetection","DOCUMENT_TEXT_DETECTION","safeSearchDetection","SAFE_SEARCH_DETECTION","imageProperties","IMAGE_PROPERTIES","cropHints","CROP_HINTS","webDetection","WEB_DETECTION","PRODUCT_SEARCH","productSearch","OBJECT_LOCALIZATION","objectLocalization"],"sources":["/Users/debjani1413/swipe-clone/node_modules/@google-cloud/vision/build/src/helpers.js"],"sourcesContent":["\"use strict\";\n// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.call = call;\nconst fs = require(\"fs\");\nconst is = require(\"is\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst gax = require(\"google-gax\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst _requestToObject = (request) => {\n    if (is.string(request)) {\n        // Is this a URL or a local file?\n        // Guess based on what the string looks like, and build the full\n        // request object in the correct format.\n        if (request.indexOf('://') === -1 || request.indexOf('file://') === 0) {\n            request = {\n                image: { source: { filename: request } },\n            };\n        }\n        else {\n            request = {\n                image: { source: { imageUri: request } },\n            };\n        }\n    }\n    else if (Buffer.isBuffer(request)) {\n        // Drop the buffer one level lower; it will get dealt with later\n        // in the function. This allows sending <Buffer> and {image: <Buffer>} to\n        // both work identically.\n        request = { image: request };\n    }\n    return request;\n};\nconst _coerceRequest = (request, callback) => {\n    // At this point, request must be an object with an `image` key; if not,\n    // it is an error. If there is no image, throw an exception.\n    if (!is.object(request) || is.undefined(request.image)) {\n        return callback(new Error('No image present.'));\n    }\n    // If this is a buffer, read it and send the object\n    // that the Vision API expects.\n    if (Buffer.isBuffer(request.image)) {\n        request.image = { content: request.image.toString('base64') };\n    }\n    // If the file is specified as a filename and exists on disk, read it\n    // and coerce it into the base64 content.\n    if (request.image.source && request.image.source.filename) {\n        fs.readFile(request.image.source.filename, (err, blob) => {\n            if (err) {\n                callback(err);\n                return;\n            }\n            request.image.content = blob.toString('base64');\n            delete request.image.source;\n            return callback(null, request);\n        });\n    }\n    else {\n        return callback(null, request);\n    }\n};\nconst _createSingleFeatureMethod = (featureValue) => {\n    return function (request, callOptionsOrCallback, callback) {\n        // confidence check: If we got a string or buffer, we need this to be\n        // in object form now, so we can tack on the features list.\n        //\n        // Do the minimum required conversion, which can also be guaranteed to\n        // be synchronous (e.g. no file loading yet; that is handled by\n        // annotateImage later.\n        const annotateImageRequest = _requestToObject(request);\n        // If a callback was provided and options were skipped, normalize\n        // the argument names.\n        let callOptions;\n        if (is.undefined(callback) && is.function(callOptionsOrCallback)) {\n            callback = callOptionsOrCallback;\n            callOptions = undefined;\n        }\n        else {\n            callOptions = callOptionsOrCallback;\n        }\n        // Add the feature to the request.\n        annotateImageRequest.features = annotateImageRequest.features || [\n            {\n                type: featureValue,\n            },\n        ];\n        // If the user submitted explicit features that do not line up with\n        // the precise method called, throw an exception.\n        for (const feature of annotateImageRequest.features) {\n            if (feature.type !== featureValue) {\n                throw new Error('Setting explicit features is not supported on this method. ' +\n                    'Use the #annotateImage method instead.');\n            }\n        }\n        // Call the underlying #annotateImage method.\n        return this.annotateImage(annotateImageRequest, callOptions, callback);\n    };\n};\nfunction call(apiVersion) {\n    const methods = {};\n    /**\n     * Annotate a single image with the requested features.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#annotateImage\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be base64 encoded text.\n     *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n     * @param {object[]} request.features An array of the specific annotation\n     *     features being requested. This should take a form such as:\n     *\n     *         [{type: vision.types.Feature.Type.FACE_DETECTION},\n     *         {type: vision.types.Feature.Type.WEB_DETECTION}]\n     *\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {source: {imageUri: 'gs://path/to/image.jpg'}},\n     *   features: [],\n     * };\n     * client\n     *   .annotateImage(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.annotateImage = (0, promisify_1.promisify)(function (request, callOptionsOrCallback, callback) {\n        // If a callback was provided and options were skipped, normalize\n        // the argument names.\n        let callOptions;\n        if (is.undefined(callback) && is.function(callOptionsOrCallback)) {\n            callback = callOptionsOrCallback;\n            callOptions = undefined;\n        }\n        else {\n            callOptions = callOptionsOrCallback;\n        }\n        // If we got a filename for the image, open the file and transform\n        // it to content.\n        return _coerceRequest(request, (err, req) => {\n            if (err) {\n                return callback(err);\n            }\n            // Call the GAPIC batch annotation function.\n            const requests = { requests: [req] };\n            return this.batchAnnotateImages(requests, callOptions, (err, r) => {\n                // If there is an error, handle it.\n                if (err) {\n                    return callback(err);\n                }\n                // We are guaranteed to only have one response element, since we\n                // only sent one image.\n                const response = r.responses[0];\n                // Fire the callback if applicable.\n                return callback(undefined, response);\n            });\n        });\n    });\n    const protoFilesRoot = gax.protobuf.Root.fromJSON(\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../protos/protos.json'));\n    const features = protoFilesRoot.lookup(`google.cloud.vision.${apiVersion}.Feature.Type`).values;\n    /**\n     * Annotate a single image with face detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#faceDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be base64 encoded text.\n     *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .faceDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.faceDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.FACE_DETECTION));\n    /**\n     * Annotate a single image with landmark detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#landmarkDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be base64 encoded text.\n     *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .landmarkDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.landmarkDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.LANDMARK_DETECTION));\n    /**\n     * Annotate a single image with logo detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#logoDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be base64 encoded text.\n     *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .logoDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.logoDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.LOGO_DETECTION));\n    /**\n     * Annotate a single image with label detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#labelDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be base64 encoded text.\n     *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .labelDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.labelDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.LABEL_DETECTION));\n    /**\n     * Annotate a single image with text detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#textDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be base64 encoded text.\n     *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .textDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.textDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.TEXT_DETECTION));\n    /**\n     * Annotate a single image with document text detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#documentTextDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be base64 encoded text.\n     *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .documentTextDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.documentTextDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.DOCUMENT_TEXT_DETECTION));\n    /**\n     * Annotate a single image with safe search detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#safeSearchDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be base64 encoded text.\n     *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .safeSearchDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.safeSearchDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.SAFE_SEARCH_DETECTION));\n    /**\n     * Annotate a single image with image properties.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#imageProperties\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be base64 encoded text.\n     *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .imageProperties(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.imageProperties = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.IMAGE_PROPERTIES));\n    /**\n     * Annotate a single image with crop hints.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#cropHints\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be base64 encoded text.\n     *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .cropHints(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.cropHints = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.CROP_HINTS));\n    /**\n     * Annotate a single image with web detection.\n     *\n     * @see v1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1.AnnotateImageRequest\n     *\n     * @method v1.ImageAnnotatorClient#webDetection\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be base64 encoded text.\n     *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision');\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .webDetection(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    methods.webDetection = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.WEB_DETECTION));\n    /**\n     * Annotate a single image with the result from Product Search.\n     *\n     * @see v1p3beta1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1p3beta1.AnnotateImageRequest\n     *\n     * @method v1p3beta1.ImageAnnotatorClient#productSearch\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1p3beta1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be base64 encoded text.\n     *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * const vision = require('@google-cloud/vision').v1p3beta1;\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .productSearch(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    if (features.PRODUCT_SEARCH !== undefined) {\n        methods.productSearch = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.PRODUCT_SEARCH));\n    }\n    /**\n     * Annotate a single image with localization vectors.\n     *\n     * @see v1p3beta1.ImageAnnotatorClient#batchAnnotateImages\n     * @see google.cloud.vision.v1p3beta1.AnnotateImageRequest\n     *\n     * @method v1p3beta1.ImageAnnotatorClient#objectLocalization\n     * @param {object|string|Buffer} request A representation of the request\n     *     being sent to the Vision API. This is an\n     *     {@link google.cloud.vision.v1.AnnotateImageRequest AnnotateImageRequest}.\n     *     For simple cases, you may also send a string (the URL or filename of\n     *     the image) or a buffer (the image itself).\n     * @param {object} request.image A dictionary-like object representing the\n     *     image. This should have a single key (`source`, `content`).\n     *\n     *     If the key is `source`, the value should be another object containing\n     *     `imageUri` or `filename` as a key and a string as a value.\n     *\n     *     If the key is `content`, the value should be base64 encoded text.\n     *     See {@link https://cloud.google.com/vision/docs/base64} for the details.\n     * @param {object} [callOptions] Optional parameters. You can override the\n     *     default settings for this call, e.g, timeout, retries, paginations,\n     *     etc. See {@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions| gax.CallOptions}\n     *     for the details.\n     * @param {function(?Error, ?object)} [callback] The function which will be\n     *     called with the result of the API call.\n     *\n     *     The second parameter to the callback is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     * @returns {Promise} The promise which resolves to an array. The first\n     *     element of the array is an object representing\n     *     [BatchAnnotateImagesResponse]{@link BatchAnnotateImagesResponse}.\n     *     The promise has a method named \"cancel\" which cancels the ongoing API\n     *     call.\n     *\n     * @example\n     * // Object localization is only available in v1p3beta1.\n     * const vision = require('@google-cloud/vision').v1p3beta1;\n     * const client = new vision.ImageAnnotatorClient();\n     *\n     * const request = {\n     *   image: {\n     *     source: {imageUri: 'gs://path/to/image.jpg'}\n     *   }\n     * };\n     *\n     * client\n     *   .objectLocalization(request)\n     *   .then(response => {\n     *     // doThingsWith(response);\n     *   })\n     *   .catch(err => {\n     *     console.error(err);\n     *   });\n     */\n    if (features.OBJECT_LOCALIZATION !== undefined) {\n        methods.objectLocalization = (0, promisify_1.promisify)(_createSingleFeatureMethod(features.OBJECT_LOCALIZATION));\n    }\n    return methods;\n}\n//# sourceMappingURL=helpers.js.map"],"mappings":"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A,MAAMmB,QAAQ,GAAGD,CAAC,CAACE,SAAS,CAAC,CAAC,CAAC;QAC/B;QACA,OAAO3B,QAAQ,CAACE,SAAS,EAAEwB,QAAQ,CAAC;MACxC,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,CAAC;EACF,MAAME,cAAc,GAAGxC,GAAG,CAACyC,QAAQ,CAACC,IAAI,CAACC,QAAQ;EACjD;EACA9C,OAAO,CAAC,uBAAuB,CAAC,CAAC;EACjC,MAAM8B,QAAQ,GAAGa,cAAc,CAACI,MAAM,CAAC,uBAAuBb,UAAU,eAAe,CAAC,CAACc,MAAM;EAC/F;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIb,OAAO,CAACc,aAAa,GAAG,CAAC,CAAC,EAAE/C,WAAW,CAACkC,SAAS,EAAEZ,0BAA0B,CAACM,QAAQ,CAACoB,cAAc,CAAC,CAAC;EACvG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIf,OAAO,CAACgB,iBAAiB,GAAG,CAAC,CAAC,EAAEjD,WAAW,CAACkC,SAAS,EAAEZ,0BAA0B,CAACM,QAAQ,CAACsB,kBAAkB,CAAC,CAAC;EAC/G;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIjB,OAAO,CAACkB,aAAa,GAAG,CAAC,CAAC,EAAEnD,WAAW,CAACkC,SAAS,EAAEZ,0BAA0B,CAACM,QAAQ,CAACwB,cAAc,CAAC,CAAC;EACvG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACInB,OAAO,CAACoB,cAAc,GAAG,CAAC,CAAC,EAAErD,WAAW,CAACkC,SAAS,EAAEZ,0BAA0B,CAACM,QAAQ,CAAC0B,eAAe,CAAC,CAAC;EACzG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIrB,OAAO,CAACsB,aAAa,GAAG,CAAC,CAAC,EAAEvD,WAAW,CAACkC,SAAS,EAAEZ,0BAA0B,CAACM,QAAQ,CAAC4B,cAAc,CAAC,CAAC;EACvG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIvB,OAAO,CAACwB,qBAAqB,GAAG,CAAC,CAAC,EAAEzD,WAAW,CAACkC,SAAS,EAAEZ,0BAA0B,CAACM,QAAQ,CAAC8B,uBAAuB,CAAC,CAAC;EACxH;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIzB,OAAO,CAAC0B,mBAAmB,GAAG,CAAC,CAAC,EAAE3D,WAAW,CAACkC,SAAS,EAAEZ,0BAA0B,CAACM,QAAQ,CAACgC,qBAAqB,CAAC,CAAC;EACpH;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI3B,OAAO,CAAC4B,eAAe,GAAG,CAAC,CAAC,EAAE7D,WAAW,CAACkC,SAAS,EAAEZ,0BAA0B,CAACM,QAAQ,CAACkC,gBAAgB,CAAC,CAAC;EAC3G;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI7B,OAAO,CAAC8B,SAAS,GAAG,CAAC,CAAC,EAAE/D,WAAW,CAACkC,SAAS,EAAEZ,0BAA0B,CAACM,QAAQ,CAACoC,UAAU,CAAC,CAAC;EAC/F;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI/B,OAAO,CAACgC,YAAY,GAAG,CAAC,CAAC,EAAEjE,WAAW,CAACkC,SAAS,EAAEZ,0BAA0B,CAACM,QAAQ,CAACsC,aAAa,CAAC,CAAC;EACrG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAItC,QAAQ,CAACuC,cAAc,KAAKpD,SAAS,EAAE;IACvCkB,OAAO,CAACmC,aAAa,GAAG,CAAC,CAAC,EAAEpE,WAAW,CAACkC,SAAS,EAAEZ,0BAA0B,CAACM,QAAQ,CAACuC,cAAc,CAAC,CAAC;EAC3G;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIvC,QAAQ,CAACyC,mBAAmB,KAAKtD,SAAS,EAAE;IAC5CkB,OAAO,CAACqC,kBAAkB,GAAG,CAAC,CAAC,EAAEtE,WAAW,CAACkC,SAAS,EAAEZ,0BAA0B,CAACM,QAAQ,CAACyC,mBAAmB,CAAC,CAAC;EACrH;EACA,OAAOpC,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}